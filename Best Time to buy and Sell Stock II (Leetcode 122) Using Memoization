class Solution {
    int profit = 0;
    public int recur(int i , int buy , int[] prices , int[][] dp) {
        if(i == prices.length)
          return 0;
        if(dp[i][buy] != -1)
           return dp[i][buy];
        if(buy == 1) {
            int take = -prices[i] + recur(i + 1 , 0 , prices , dp);
            int notTake = recur(i + 1 , 1 , prices , dp);
            profit = Math.max(take , notTake);
        }
        else {
            int take = prices[i] + recur(i + 1 , 1 , prices , dp);
            int notTake = recur(i + 1 , 0 , prices , dp);
            profit = Math.max(take , notTake);
        }
        return dp[i][buy] = profit;
    }
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int dp[][] = new int[n][2];
        for(int arr[] : dp)
           Arrays.fill(arr , -1);
        return recur(0 , 1 , prices , dp);
        
    }
}
